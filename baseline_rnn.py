# -*- coding: utf-8 -*-
"""baseline_rnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fszft9mV1VWYc1q4vp8G96N5ewNC9du6
"""

# Mount Google Drive
from google.colab import drive # import drive from google colab

ROOT = "/content/drive"     # default location for the drive
print(ROOT)                 # print content of ROOT (Optional)

drive.mount(ROOT)           # we mount the google drive at /content/drive

# Commented out IPython magic to ensure Python compatibility.
# % cd 'drive'
# % cd 'My Drive'
# % cd "PROJECT_PATH"
# % cd "melody_generator_rnn"

#@title Install

#@markdown Install magenta and fluidsynth as a synthesizer to listen de audios.
 #@markdown Magenta is compatible with both Python 2 and 3.
 #@markdown This take some time, specially for fluidsynth installation

!apt-get update -qq && apt-get install -qq libfluidsynth1 fluid-soundfont-gm build-essential libasound2-dev libjack-dev
!pip install -qU pyfluidsynth pretty_midi

!pip install magenta

# Hack to allow python to pick up the newly-installed fluidsynth lib. 
# This is only needed for the hosted Colab environment.
import ctypes.util
orig_ctypes_util_find_library = ctypes.util.find_library
def proxy_find_library(lib):
  if lib == 'fluidsynth':
    return 'libfluidsynth.so.1'
  else:
    return orig_ctypes_util_find_library(lib)
ctypes.util.find_library = proxy_find_library

#@title Import Dependencies
#@markdown Import libraries from Magenta, Tensorflow and Numpy

from google.colab import files
import numpy as np
import os
import tensorflow as tf
import magenta.music as mm
import magenta
from magenta.scripts import convert_dir_to_note_sequences
from magenta.models.melody_rnn import *

# create database for baseline model
!melody_rnn_create_dataset \
--config=basic_rnn \
--input=/content/drive/MyDrive/PROJECT_PATH/melody_generator_rnn/notesequences.tfrecord \
--output_dir=/content/drive/MyDrive/PROJECT_PATH/melody_generator_rnn/baseline_sequences \
--eval_ratio=0.10

# Commented out IPython magic to ensure Python compatibility.
# %reload_ext tensorboard
# %tensorboard --logdir logdir

# train baseline model

!melody_rnn_train \
--config=basic_rnn \
--run_dir="/content/drive/MyDrive/PROJECT_PATH/melody_generator_rnn/logdir/base" \
--sequence_example_file=/content/drive/MyDrive/PROJECT_PATH/melody_generator_rnn/baseline_sequences/training_melodies.tfrecord \
--hparams="batch_size=64,rnn_layer_sizes=[64,64]" \
--num_training_steps=20000

# create a bundle file 
!melody_rnn_generate \
--config=basic_rnn \
--run_dir="/content/drive/MyDrive/PROJECT_PATH/melody_generator_rnn/logdir/base" \
--hparams="batch_size=64,rnn_layer_sizes=[64,64]" \
--bundle_file="/content/drive/MyDrive/PROJECT_PATH/melody_generator_rnn/baseline_rnn.mag" \
--save_generator_bundle

# generate melody
# BUNDLE_PATH=<absolute path of .mag file>
# CONFIG=<one of 'basic_rnn', 'lookback_rnn', or 'attention_rnn', matching the bundle>

melody_rnn_generate \
--config=${CONFIG} \
--bundle_file=${BUNDLE_PATH} \
--output_dir=/tmp/melody_rnn/generated \
--num_outputs=10 \
--num_steps=128 \
--primer_melody="[60]"