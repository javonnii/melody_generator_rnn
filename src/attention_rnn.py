# -*- coding: utf-8 -*-
"""GitHub setup with colab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TwFSs3LWfUXMZfXo45qlK8lfrRj1IFez
"""

# Mount Google Drive
from google.colab import drive # import drive from google colab

ROOT = "/content/drive"     # default location for the drive
print(ROOT)                 # print content of ROOT (Optional)

drive.mount(ROOT)           # we mount the google drive at /content/drive

# Commented out IPython magic to ensure Python compatibility.
# change the directory to my drive
# % cd 'drive'
# % cd 'My Drive'
# % pwd

# Commented out IPython magic to ensure Python compatibility.
# % pwd
# % ls

# Clone github repository setup
# import join used to join ROOT path and MY_GOOGLE_DRIVE_PATH

from os.path import join 

# path to your project on Google Drive
MY_GOOGLE_DRIVE_PATH = 'My Drive/capstone 3'

GIT_USERNAME = "javonnii"

GIT_TOKEN = ""


# Git repository
GIT_REPOSITORY = "melody_generator_lstm"

PROJECT_PATH = join(ROOT, MY_GOOGLE_DRIVE_PATH)

# It's good to print out the value if you are not sure
print("PROJECT_PATH: ", PROJECT_PATH)

# In case we haven't created the folder already; we will create a folder in the project
!mkdir "PROJECT_PATH" 

#GIT_PATH = "https://{GIT_TOKEN}@github.com/{GIT_USERNAME}/{GIT_REPOSITORY}.git" this return 400 Bad Request for me
GIT_PATH = "https://" + GIT_TOKEN + "@github.com/" + GIT_USERNAME + "/" + GIT_REPOSITORY + ".git"
print("GIT_PATH: ", GIT_PATH)

# Commented out IPython magic to ensure Python compatibility.
# % cd "PROJECT_PATH"
!git clone "https://github.com/javonnii/melody_generator_rnn.git"

# Commented out IPython magic to ensure Python compatibility.
# % cd 'melody_generator_rnn'

# Commented out IPython magic to ensure Python compatibility.
# % cd ..
# % pwd

# % cd 'melody_generator_rnn'
from getpass import getpass
password = getpass('Password:')
!git add .
!git commit -m "adding magenta folder"
!git config --global user.email "javonniicurry@gmail.com"
!git config --global user.name "javonnii"
!git push # not working yet

# Commented out IPython magic to ensure Python compatibility.
# % pwd

# Commented out IPython magic to ensure Python compatibility.
# % cd "PROJECT_PATH"
# % cd "melody_generator_rnn"

!apt-get update -qq && apt-get install -qq libfluidsynth1 fluid-soundfont-gm build-essential libasound2-dev libjack-dev
!pip install -qU pyfluidsynth pretty_midi

!pip install magenta==2.1.2

# Hack to allow python to pick up the newly-installed fluidsynth lib. 
# This is only needed for the hosted Colab environment.
import ctypes.util
orig_ctypes_util_find_library = ctypes.util.find_library
def proxy_find_library(lib):
  if lib == 'fluidsynth':
    return 'libfluidsynth.so.1'
  else:
    return orig_ctypes_util_find_library(lib)
ctypes.util.find_library = proxy_find_library

#@title Import Dependencies
#@markdown Import libraries from Magenta, Tensorflow and Numpy

from google.colab import files
import numpy as np
import os
import tensorflow as tf
import magenta.music as mm
import magenta
from magenta.scripts import convert_dir_to_note_sequences
from magenta.models.melody_rnn import *
from magenta.models.polyphony_rnn import *

!convert_dir_to_note_sequences --input_dir="/content/drive/My Drive/PROJECT_PATH/melody_generator_rnn/output_midi_data" --output_file="/content/drive/My Drive/PROJECT_PATH/melody_generator_rnn/notesequences.tfrecord"

# create dataset

!melody_rnn_create_dataset \
--config='attention_rnn' \
--input="/content/drive/My Drive/PROJECT_PATH/melody_generator_rnn/notesequences.tfrecord" \
--output_dir="/content/drive/My Drive/PROJECT_PATH/melody_generator_rnn/sequence_examples" \
--eval_ratio=0.10

gpu_info = !nvidia-smi
gpu_info = '\n'.join(gpu_info)
if gpu_info.find('failed') >= 0:
  print('Select the Runtime > "Change runtime type" menu to enable a GPU accelerator, ')
  print('and then re-execute this cell.')
else:
  print(gpu_info)

!kill 22461

# train and Evaluate the Model

!melody_rnn_train \
--config=attention_rnn \
--run_dir="/content/drive/MyDrive/PROJECT_PATH/melody_generator_rnn/logdir/run1" \
--sequence_example_file="/content/drive/MyDrive/PROJECT_PATH/melody_generator_rnn/sequence_examples/training_melodies.tfrecord" \
--hparams="batch_size=64,rnn_layer_sizes=[64,64]" \
--num_training_steps=20000

# generate Melodies

!melody_rnn_generate \
--config=attention_rnn \
--run_dir="/content/drive/MyDrive/PROJECT_PATH/melody_generator_rnn/logdir/run1" \
--output_dir="/content/drive/MyDrive/PROJECT_PATH/melody_generator_rnn/generated" \
--num_outputs=10 \
--num_steps=128 \
--hparams='batch_size=64,rnn_layer_sizes=[64,64]' \
--primer_midi="/content/drive/MyDrive/PROJECT_PATH/melody_generator_rnn/primers/Aescaus - ARP.mid"

#test and train sample split wih 10% ratio
!polyphony_rnn_create_dataset \
--input="/content/drive/My Drive/PROJECT_PATH/melody_generator_rnn/notesequences.tfrecord" \
--output_dir="/content/drive/My Drive/PROJECT_PATH/melody_generator_rnn/sequence_examples_poly" \
--eval_ratio=0.10 \
--config='polyphony'